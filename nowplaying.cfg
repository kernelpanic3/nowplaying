# nowplaying.cfg - config file for nowplaying.py
# config version 0.5.2

[Input]
# Settings for where and how to get the now playing info.
#
# type - The automation system you are using.
#        The following options are supported:
#           * rivendell - Rivendell. Supports 2.1.5 and later using the filewrite RLM (2.x)/PyPAD (3.x and later).
#           * sam - SAM Broadcaster. Supports at least 4.8.0 and later.
#           * azuracast - AzuraCast. Supports 0.17.6 and later. - EXPERIMENTAL AS HECK AND PROBABLY DOES NOT WORK YET
#           * generic - A catch-all option. Should work with anything that can output now playing info to a text file.
# directory - Folder where file is uploaded from automation.
# file - File inside directory to watch for updates.
# delete_file - True/False, should the file be deleted after reading? This might be needed for some more esoteric setups, e.g. FTP.
# push_file = True/False, should the file be pushed

type = rivendell
directory = /ftp/upload/directory/here
file = nowplaying.txt
delete_file = False
push_file = False

[Icecast]
# Settings for updating an Icecast stream.
#
# enable - True/False, should Icecast be updated?
# server - Address of Icecast server where the stream is being broadcast.
# port - Port for Icecast. The default is usually 8000.
# ssl - True/False, use SSL for connection?
# mountpoint - Name of mountpoint to update. Do *not* include the preceding / - e.g. "live.mp3" rather than "/live.mp3"
# user - Source user for Icecast authentication, from icecast.xml on server.
# password - Source password for Icecast auth, also from icecast.xml on server.

enable = True
server = icecast.server
port = 8000
ssl = True
mountpoint = mount
user = source
password = hackme

[RDS]
# Settings for updating RDS.
#
# enable - True/False, should RDS be updated?
# protocol - Protocol to use when communicating with RDS encoder.
#        The following options are supported:
#           * inovonics - For Inovonics encoders (Novia 272, Model 732, Aaron 655)
#           * deva - For DEVA Broadcast encoders (SmartGen series) - EXPERIMENTAL AS HECK AND PROBABLY DOES NOT WORK YET
# host - IP/hostname where RDS encoder is located.
# port - Port for Telnet access, set in encoder config. If the encoder is located on a different network, this port should be accessible from the internet.
#        On Novia encoders the default is 10001.
# ps_prefix - Prefix command for sending PS data.
#        On Novia encoders the default is DPS=
# rt_prefix - Prefix command for sending RT data.
#        On Novia encoders the default is TEXT=
# dynamic_ps - True/False, should branding + now playing be sent as dynamic PS?
#        Dynamic PS is not allowed in some countries, and in any case is *technically* noncompliant with the RDS standard.
# strip_separators - True/False, should separators (e.g. " - ") be removed from dynamic PS data? True is recommended for a cleaner look.
# separator - Separator to strip from dynamic PS data, wrapped in 'single quotes'. Most stations probably use ' - '.

enable = True
protocol = inovonics
host = rds.host
port = 10001
ps_prefix = DPS=
rt_prefix = TEXT=
dynamic_ps = False
strip_separators = True
separator = ' - '

[Branding]
# Settings for brandings to use on stream and RDS.
#
# long_branding - Used for Icecast.
# short_branding - Used for Icecast.
# rt_branding - Used for RDS RT.
# ps_branding - Used for RDS PS. Must be 8 characters or less if dynamic_ps is set to False.
# taglines - Generic promotional lines. These will be rotated through at random.
# taglines_on_rds - True/False, should RDS RT cycle between artist+song and taglines? 
# taglines_switch_time - Number of seconds to wait before cycling between tagline and now playing info.

long_branding = 107.9 Ice Cream Radio
short_branding = Ice Cream Radio
rt_branding = 107.9 Ice Cream Radio
ps_branding = IceCream

taglines =
    Wow!
    You can place snappy slogans here.
    Add as many as you like and one will be chosen randomly every cycle.
    I like ponies :)
taglines_on_rds = false
taglines_switch_time = 10